/*
FIchier : Creation_GroupeA.sql
Auteurs : 
Pierre Dupont 2019334455
Paul Dupond 2019335629
Nom du groupe : A
*/

/*
A METTTRE OBLIGATOIREMENT AU DEBUT 
- SUPPRESSION DE LA BASE DE DONNEES
- CREATION DE LA BASE DE DONNEES
- SUPPRESSIONS DE TOUTES LES BASES CREEES POUR LE PROJET
*/

DROP DATABASE IF EXISTS BDVOL;
CREATE DATABASE BDVOL;
USE BDVOL;
/*
Création de la base de  données
*/
DROP TABLE  IF EXISTS VOL; 
DROP TABLE  IF EXISTS PILOTE; 
DROP TABLE  IF EXISTS AVION; 
DROP TABLE  IF EXISTS LOGERROR; 	

/*
Creation des relations pilote - avion - vol. 
Logerror est utilisée par les triggers
*/

CREATE TABLE PILOTE (
	NUMPIL NUMERIC(4,0), 
	NOMPIL VARCHAR(50) NOT NULL, 
	ADR VARCHAR(50),
	SAL NUMERIC(5,2),
	CONSTRAINT PK_PILOTE PRIMARY KEY (NUMPIL)
);


CREATE TABLE AVION (
	NUMAV NUMERIC(4,0),  
	NOMAV VARCHAR(20)  NOT NULL, 
	LOC VARCHAR(10), 
	CAP NUMERIC(3,0),
	CONSTRAINT PK_AVION PRIMARY KEY (NUMAV)
);


CREATE TABLE VOL (
	NUMVOL NUMERIC(4,0), 
	NUMPIL NUMERIC(4,0), 
	NUMAV NUMERIC(4,0), 
	VD VARCHAR(12) ,
	VA VARCHAR (12),
	HD NUMERIC (2,0),
	HA NUMERIC (2,0),
	CONSTRAINT PK_VOL PRIMARY KEY (NUMVOL),
	CONSTRAINT FK_VOL_PILOTE FOREIGN KEY (NUMPIL) REFERENCES PILOTE(NUMPIL),
	CONSTRAINT FK_VOL_AVION FOREIGN KEY (NUMAV) REFERENCES AVION(NUMAV)
);
	
	
CREATE TABLE LOGERROR  (
  ID INT(11) AUTO_INCREMENT,
  MESSAGE VARCHAR(255) DEFAULT NULL,
  THETIME TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT PK_LOGERROR PRIMARY KEY (ID)
);	
	
/* 
Insertion de tuples dans les relations
*/
INSERT INTO PILOTE VALUES (1, "DUPONT", "LYON", 10);
INSERT INTO PILOTE VALUES (2, "DUPOND", "PARIS", 60);
INSERT INTO PILOTE VALUES (3, "DURAND", "MONTPELLIER", 40);

INSERT INTO AVION VALUES (100, "A380", "PARIS", 585);
INSERT INTO AVION VALUES (101, "A732", "LILLE", 185);
INSERT INTO AVION VALUES (102, "A130", "PARIS", 130);

INSERT INTO VOL VALUES (10, 1, 100, "PARIS", "MONTPELLIER",13,14);
INSERT INTO VOL VALUES (11, 2, 101, "LYON","LILLE",15,17);


/* 
Affichage des tuples
*/
SELECT * FROM VOL;
SELECT * FROM PILOTE;
SELECT * FROM AVION;

/* 
Définion de triggers
*/

/* 
Trigger pour garantir qu'un salaire est supérieur à 0
*/



DROP TRIGGER IF EXISTS ATTENTION_SALAIRE
DELIMITER $$
CREATE TRIGGER ATTENTION_SALAIRE
BEFORE INSERT on pilote
FOR EACH ROW BEGIN 
IF NEW.SAL=0 THEN
    INSERT INTO LOGERROR(MESSAGE) VALUES (CONCAT("ATTENTION, LE SALAIRE DOIT ETRE SUPERIEUR A 0"));
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'LE SALAIRE DOIT ËTRE SUPERIEUR A 0';
END IF; 
END; $$


/* 
Triggers pour garantir qu'un vol ne peut se faire qu'avec un avion localisé dans 
la même ville que la ville de départ
*/

DROP TRIGGER IF EXISTS VOL_AVION_MEME_VILLE;

DELIMITER $$
CREATE TRIGGER VOL_AVION_MEME_VILLE 
    BEFORE INSERT ON VOL
    FOR EACH ROW 
BEGIN 
    DECLARE LOC_AVION VARCHAR(10);
    SET LOC_AVION = (SELECT LOC FROM AVION WHERE NEW.NUMAV=AVION.NUMAV);
    
    IF NEW.VD <> LOC_AVION THEN 
        #SET MESSAGE_ERROR=CONCAT()
        INSERT INTO LOGERROR(MESSAGE) VALUES ("ERREUR AVION DANS VILLE DIFFERENTE");
        SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT ="LES VOLS DOIVENT UTILISER DES AVIONS LOCALISES DANS LA MEME VILLE QUE LA VILLE DE DEPART";
    END IF;
END $$
DELIMITER ;

/*
Définition de functions ou procedures
*/

DROP FUNCTION IF EXISTS NIVEAU_SALAIRE;
DELIMITER $$
CREATE FUNCTION NIVEAU_SALAIRE (SALPILOTE NUMERIC(5,2))
RETURNS VARCHAR(20)
DETERMINISTIC
BEGIN
    DECLARE NIVEAU VARCHAR(20);
    
    IF SALPILOTE > 50 THEN
        SET NIVEAU = 'HAUT';
    ELSIF (SALPILOTE >= 20 AND 
            SALPILOTE <= 50) THEN
        SET NIVEAU= 'NORMAL';
    ELSIF SALPILOTE < 20 THEN
        SET NIVEAU = 'BAS';
    END IF;
    RETURN (NIVEAU);
END$$
DELIMITER ;